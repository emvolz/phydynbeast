% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/phydyn.R
\name{config_phydyn}
\alias{config_phydyn}
\title{Configure a PhyDyn analysis and generate an XML file for BEAST analysis.}
\usage{
config_phydyn(
  xmlfn,
  saveto,
  t0parm = confparm(name = "t0"),
  equations = list(),
  parameters = list(),
  coalescent_approximation = c("PL1", "QL", "PL2"),
  integrationSteps = 200,
  minP = 0.001,
  penaltyAgtY = 0,
  useStateName = TRUE,
  traj_log_file = "traj.tsv",
  traj_log_frequency = 10000
)
}
\arguments{
\item{xmlfn}{The filename of the BEAST template XML.}

\item{saveto}{Where the file will be saved}

\item{t0parm}{A parameter (made using `confparm) for the time (numeric) of intialisation of the demographic or epidemiological simulation. This parameter may be estimated or fixed.}

\item{equations}{A list of `phydynequation` which can be made using `confeqn`}

\item{parameters}{A list of `phydynparameter` which can be made using `confparm`}

\item{coalescent_approximation}{Which approximation to the structured coalescent likelihood should be used? See \url{https://github.com/mrc-ide/PhyDyn/wiki/Structured-Tree-Likelihood}. Note an accuracy/speed tradeoff with different methods.}

\item{integrationSteps}{Integer number of time steps to use when solving ODEs. Note an accuracy/speed tradeoff.}

\item{penaltyAgtY}{If state variables specify a population size, this parameter can penalise parameter values which predict the number of extant lineages exceeding population size. Usually population sizes are "effective" and no penalty should be applied (default=0).}

\item{useStateName}{If TRUE, the deme from which each sequence is sampled is specified in the sequence name using the suffix "_<deme name>". Alternatively, the demes of sampling must be specified in the template XML.}

\item{traj_log_file}{The file to which model simulated trajectories will be saved}

\item{traj_log_frequency}{Integer number of MCMC steps between logging model trajectories}
}
\value{
A PhyDyn model. The corresponding XML file is written to disk.
}
\description{
This function takes a XML template file and includes PhyDyn model elements (equations and parameters). The resulting XML file can then be analysed in BEAST with the PhyDyn package.
}
\examples{
\dontrun{
# Configure a model with exponential growth, birth(beta) & death(gamma), in two demes, with migration (mu) between demes
eqns <- list( 
	confeqn( 'beta*gb', type = 'birth', origin = 'gb', destination = 'gb' )
	, confeqn( 'beta*oth', type = 'birth', origin = 'oth', destination = 'oth' )
	, confeqn( 'mu*oth', type = 'migration', origin = 'oth', destination = 'gb' )
	, confeqn( 'mu*gb', type = 'migration', origin = 'gb', destination = 'oth' )
	, confeqn( 'gamma*gb', type = 'death', origin = 'gb' )
	, confeqn( 'gamma*oth', type = 'death', origin = 'oth' )
)
parms <- list(
	      confparm( 'beta'
	      	       , initial = 1.5*365*(1/5.5)
	      	       , prior = 'lognormal'
	      	       , operator = 'realrw' 
	      	       , lower = .5*365*(1/5.5)
	      	       , upper = 4*365*(1/5.5)
	      	       , M = log(  1.5*365*(1/5.5)) , S = 1.0
	      	       )
	      , confparm( 'gamma'
	      		 , initial = 365*(1/5.5)
	      		 , estimate = FALSE 
	      		 )
	      , confparm( 'mu'
	      		 , initial = 12 
	      		 , prior = 'exponential'
	      		 , operator = 'realrw' 
	      		 , estimate = TRUE
	      		 , lower = 1/4
	      		 , upper = 52
	      		 , mean = 12 
	      		 )
	# estimate initial deme sizes
	      , confparm( 'gb'
	      		 , initial_condition_parameter = TRUE 
	      		 , initial = 1e-2
	      		 , estimate = TRUE
	      		 , prior = 'exponential'
	      		 , operator = 'realrw'
	      		 , lower = 0
	      		 , upper = 1e2 
	      		 , mean = 10
	      		 )
	      , confparm( 'oth'
	      		 , initial_condition_parameter = TRUE 
	      		 , initial = 1e-2
	      		 , estimate = TRUE 
	      		 , prior = 'exponential'
	      		 , operator = 'realrw'
	      		 , lower = 0 
	      		 , upper = 1e2
	      		 , mean = 10 
	      		 )
	)
model <- config_phydyn(
 	 system.file( 'extdata', 'ba.2.86_algnWu-Hu-1.1_qc0_beast_template.xml', package = 'phydynbeast' )
 	  , saveto = 'ba.2.86_simodel0.xml'
 	  , t0 = confparm( 't0'
	      		 , estimate = FALSE
	      		 , initial = 2023.25
	      		 )
	      )
 	  , equations = eqns  
 	  , parameters = parms
 	  , coalescent_approximation = 'PL1'
 	  , integrationSteps = 100 
 	  , minP = 0.001
 	  , penaltyAgtY= 0 
 	  , useStateName = TRUE 
 	  , traj_log_file = 'simodel0-traj.tsv'
 	  , traj_log_frequency = 10000
)
}
}
